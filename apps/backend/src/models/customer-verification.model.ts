import type { 
  CustomerVerification, 
  ValidationResults,
  VerificationStatus 
} from '@vocilia/types';

/**
 * CustomerVerification model for database operations
 * Represents a customer's transaction verification submission
 */
export class CustomerVerificationModel {
  public readonly verification_id: string;
  public readonly session_token: string;
  public readonly transaction_time: string;
  public readonly transaction_amount: number;
  public readonly phone_number: string;
  public verification_status: VerificationStatus;
  public readonly submitted_at: Date;
  public readonly validation_results: ValidationResults;

  constructor(data: CustomerVerification) {
    this.verification_id = data.verification_id;
    this.session_token = data.session_token;
    this.transaction_time = data.transaction_time;
    this.transaction_amount = data.transaction_amount;
    this.phone_number = data.phone_number;
    this.verification_status = data.verification_status;
    this.submitted_at = data.submitted_at;
    this.validation_results = data.validation_results;
  }

  /**
   * Check if verification is valid (all validations passed)
   */
  public isValid(): boolean {
    return this.validation_results.overall_valid;
  }

  /**
   * Check if verification is completed successfully
   */
  public isCompleted(): boolean {
    return this.verification_status === 'completed' && this.isValid();
  }

  /**
   * Check if verification failed
   */
  public isFailed(): boolean {
    return this.verification_status === 'failed' || !this.isValid();
  }

  /**
   * Get validation summary
   */
  public getValidationSummary(): {
    timeValid: boolean;
    amountValid: boolean;
    phoneValid: boolean;
    overallValid: boolean;
  } {
    return {
      timeValid: this.validation_results.time_validation.status === 'valid',
      amountValid: this.validation_results.amount_validation.status === 'valid',
      phoneValid: this.validation_results.phone_validation.status === 'valid',
      overallValid: this.validation_results.overall_valid
    };
  }

  /**
   * Get formatted phone number (E.164 format if available)
   */
  public getFormattedPhoneNumber(): string {
    if (this.validation_results.phone_validation.e164_format) {
      return this.validation_results.phone_validation.e164_format;
    }
    return this.phone_number;
  }

  /**
   * Get time difference in minutes from validation
   */
  public getTimeDifferenceMinutes(): number | null {
    return this.validation_results.time_validation.difference_minutes || null;
  }

  /**
   * Get amount difference in SEK from validation
   */
  public getAmountDifferenceSEK(): number | null {
    return this.validation_results.amount_validation.difference_sek || null;
  }

  /**
   * Update verification status
   */
  public updateStatus(status: VerificationStatus): void {
    this.verification_status = status;
  }

  /**
   * Convert to plain object for database operations
   */
  public toObject(): CustomerVerification {
    return {
      verification_id: this.verification_id,
      session_token: this.session_token,
      transaction_time: this.transaction_time,
      transaction_amount: this.transaction_amount,
      phone_number: this.phone_number,
      verification_status: this.verification_status,
      submitted_at: this.submitted_at,
      validation_results: this.validation_results
    };
  }

  /**
   * Create from database row
   */
  public static fromDatabaseRow(row: any): CustomerVerificationModel {
    return new CustomerVerificationModel({
      verification_id: row.verification_id,
      session_token: row.session_token,
      transaction_time: row.transaction_time,
      transaction_amount: parseFloat(row.transaction_amount),
      phone_number: row.phone_number,
      verification_status: row.verification_status,
      submitted_at: new Date(row.submitted_at),
      validation_results: row.validation_results
    });
  }

  /**
   * Create new verification with validation results
   */
  public static createNew(
    sessionToken: string,
    transactionTime: string,
    transactionAmount: number,
    phoneNumber: string,
    validationResults: ValidationResults
  ): CustomerVerificationModel {
    const status: VerificationStatus = validationResults.overall_valid ? 'completed' : 'failed';

    return new CustomerVerificationModel({
      verification_id: '', // Will be generated by database
      session_token: sessionToken,
      transaction_time: transactionTime,
      transaction_amount: transactionAmount,
      phone_number: phoneNumber,
      verification_status: status,
      submitted_at: new Date(),
      validation_results: validationResults
    });
  }

  /**
   * Create verification for database insertion (without ID)
   */
  public toCreateObject(): Omit<CustomerVerification, 'verification_id'> {
    return {
      session_token: this.session_token,
      transaction_time: this.transaction_time,
      transaction_amount: this.transaction_amount,
      phone_number: this.phone_number,
      verification_status: this.verification_status,
      submitted_at: this.submitted_at,
      validation_results: this.validation_results
    };
  }
}