import type { 
  VerificationSession, 
  VerificationSessionStatus 
} from '@vocilia/types';

/**
 * VerificationSession model for database operations
 * Represents a QR verification session with 30-minute expiry
 */
export class VerificationSessionModel {
  public readonly id: string;
  public readonly store_id: string;
  public readonly qr_version: number;
  public readonly scan_timestamp: Date;
  public readonly session_token: string;
  public status: VerificationSessionStatus;
  public readonly ip_address: string | null;
  public readonly user_agent: string | null;
  public readonly created_at: Date;
  public updated_at: Date;

  constructor(data: VerificationSession) {
    this.id = data.id;
    this.store_id = data.store_id;
    this.qr_version = data.qr_version;
    this.scan_timestamp = new Date(data.scan_timestamp);
    this.session_token = data.session_token;
    this.status = data.status;
    this.ip_address = data.ip_address;
    this.user_agent = data.user_agent;
    this.created_at = new Date(data.created_at);
    this.updated_at = new Date(data.updated_at);
  }

  /**
   * Check if the session is still valid (not expired and in pending status)
   */
  public isValid(): boolean {
    const now = new Date();
    const expiryTime = new Date(this.created_at.getTime() + 30 * 60 * 1000); // 30 minutes
    return expiryTime > now && this.status === 'pending';
  }

  /**
   * Check if the session has expired
   */
  public isExpired(): boolean {
    const now = new Date();
    const expiryTime = new Date(this.created_at.getTime() + 30 * 60 * 1000);
    return now > expiryTime;
  }

  /**
   * Get remaining time in minutes
   */
  public getRemainingMinutes(): number {
    const now = new Date();
    const expiryTime = new Date(this.created_at.getTime() + 30 * 60 * 1000);
    const remainingMs = expiryTime.getTime() - now.getTime();
    return Math.max(0, Math.floor(remainingMs / (1000 * 60)));
  }

  /**
   * Get expiry timestamp
   */
  public getExpiryTime(): Date {
    return new Date(this.created_at.getTime() + 30 * 60 * 1000);
  }

  /**
   * Update session status
   */
  public updateStatus(status: VerificationSessionStatus): void {
    this.status = status;
    this.updated_at = new Date();
  }

  /**
   * Convert to plain object for database operations
   */
  public toObject(): VerificationSession {
    return {
      id: this.id,
      store_id: this.store_id,
      qr_version: this.qr_version,
      scan_timestamp: this.scan_timestamp.toISOString(),
      session_token: this.session_token,
      status: this.status,
      ip_address: this.ip_address,
      user_agent: this.user_agent,
      created_at: this.created_at.toISOString(),
      updated_at: this.updated_at.toISOString()
    };
  }

  /**
   * Create from database row
   */
  public static fromDatabaseRow(row: any): VerificationSessionModel {
    return new VerificationSessionModel({
      id: row.id,
      store_id: row.store_id,
      qr_version: row.qr_version,
      scan_timestamp: row.scan_timestamp,
      session_token: row.session_token,
      status: row.status,
      ip_address: row.ip_address,
      user_agent: row.user_agent,
      created_at: row.created_at,
      updated_at: row.updated_at
    });
  }

  /**
   * Generate session token (64 characters, cryptographically secure)
   */
  public static generateSessionToken(): string {
    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < 64; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * Create new session
   */
  public static createNew(
    storeId: string,
    qrVersion: number,
    ipAddress: string | null,
    userAgent: string | null
  ): VerificationSessionModel {
    const now = new Date();

    return new VerificationSessionModel({
      id: '', // Will be generated by database
      store_id: storeId,
      qr_version: qrVersion,
      scan_timestamp: now.toISOString(),
      session_token: this.generateSessionToken(),
      status: 'pending',
      ip_address: ipAddress,
      user_agent: userAgent,
      created_at: now.toISOString(),
      updated_at: now.toISOString()
    });
  }

  /**
   * Create session for database insertion (without ID)
   */
  public toInsertObject(): Omit<VerificationSession, 'id'> {
    return {
      store_id: this.store_id,
      qr_version: this.qr_version,
      scan_timestamp: this.scan_timestamp.toISOString(),
      session_token: this.session_token,
      status: this.status,
      ip_address: this.ip_address,
      user_agent: this.user_agent,
      created_at: this.created_at.toISOString(),
      updated_at: this.updated_at.toISOString()
    };
  }
}