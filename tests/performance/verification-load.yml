# Artillery Load Testing Configuration for Verification Submission
# Tests the verification system under high load with Swedish customer data

config:
  target: '{{ $processEnvironment.BACKEND_API_URL || "http://localhost:8000" }}'
  phases:
    # Quick warm-up for verification system
    - duration: 30
      arrivalRate: 1
      name: "Warm-up verification system"
    # Gradual increase to simulate real usage patterns
    - duration: 120
      arrivalRate: 3
      rampTo: 15
      name: "Ramp-up verification load"
    # Sustained verification load
    - duration: 240
      arrivalRate: 15
      name: "Sustained verification processing"
    # Peak verification load (busy periods)
    - duration: 90
      arrivalRate: 15
      rampTo: 30
      name: "Peak verification load"
    # Stress test - beyond normal capacity
    - duration: 60
      arrivalRate: 30
      rampTo: 50
      name: "Stress test verification"
    # Recovery test
    - duration: 60
      arrivalRate: 50
      rampTo: 5
      name: "Recovery verification load"
  
  # Performance thresholds specific to verification
  ensure:
    thresholds:
      - http.response_time.p95: 600   # 95% under 600ms (verification is critical)
      - http.response_time.p99: 1000  # 99% under 1s
      - http.response_time.median: 300 # Median under 300ms
      - http.codes.200: 98  # 98% success rate (higher than general APIs)
      - http.codes.422: 2   # Accept up to 2% validation errors
      - http.codes.500: 0   # No server errors allowed
      - http.codes.429: 1   # Allow minimal rate limiting
    
  # Verification-specific configuration
  http:
    timeout: 5  # Shorter timeout for verification
    extendedMetrics: true
    
  # Swedish customer test data
  payload:
    path: "{{ $processEnvironment.VERIFICATION_TEST_DATA || './tests/generators/verification-data.csv' }}"
    fields:
      - swedishPhone
      - personalNumber
      - firstName
      - lastName
      - postalCode
      - sessionId
    order: random
    skipHeader: true

  # Metrics collection
  plugins:
    statsd:
      host: "{{ $processEnvironment.STATSD_HOST }}"
      port: "{{ $processEnvironment.STATSD_PORT || 8125 }}"
      prefix: "vocilia.verification_load"

scenarios:
  # Primary verification submission flow
  - name: "Standard Verification Submission"
    weight: 60
    flow:
      # Submit customer verification data
      - post:
          url: "/api/verification/submit"
          headers:
            Content-Type: "application/json"
            X-Client-Version: "1.0.0"
            X-Platform: "mobile"
          json:
            sessionId: "{{ sessionId }}"
            phone: "{{ swedishPhone }}"
            personalNumber: "{{ personalNumber }}"
            firstName: "{{ firstName }}"
            lastName: "{{ lastName }}"
            postalCode: "{{ postalCode }}"
            consent: true
            marketing: "{{ $randomBoolean() }}"
            timestamp: "{{ $timestamp() }}"
          capture:
            - json: "$.data.verificationId"
              as: "verificationId"
            - json: "$.data.status"
              as: "verificationStatus"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "data.verificationId"
            - hasProperty: "data.status"

      # Check verification status
      - get:
          url: "/api/verification/{{ verificationId }}/status"
          headers:
            X-Client-Version: "1.0.0"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "data.status"
          think: 1

      # Update verification if needed
      - put:
          url: "/api/verification/{{ verificationId }}"
          headers:
            Content-Type: "application/json"
          json:
            additionalData:
              deviceInfo: "iPhone 14 Pro"
              appVersion: "1.0.0"
              location: "Stockholm"
          expect:
            - statusCode: 200
            - contentType: json

  # Rapid verification attempts (testing rate limiting)
  - name: "Rapid Verification Attempts"
    weight: 20
    flow:
      - loop:
          - post:
              url: "/api/verification/submit"
              headers:
                Content-Type: "application/json"
              json:
                sessionId: "rapid-{{ $randomString() }}"
                phone: "{{ swedishPhone }}"
                personalNumber: "{{ personalNumber }}"
                consent: true
              expect:
                - statusCode: [200, 429] # Accept rate limiting
        count: 5
        whileTrue: "template"

  # Verification with invalid data (testing validation)
  - name: "Invalid Verification Data"
    weight: 10
    flow:
      # Test with invalid phone number
      - post:
          url: "/api/verification/submit"
          headers:
            Content-Type: "application/json"
          json:
            sessionId: "invalid-phone-{{ $randomString() }}"
            phone: "123456789" # Invalid Swedish phone
            personalNumber: "{{ personalNumber }}"
            consent: true
          expect:
            - statusCode: 422
            - contentType: json
            - hasProperty: "error"

      # Test with invalid personal number
      - post:
          url: "/api/verification/submit"
          headers:
            Content-Type: "application/json"
          json:
            sessionId: "invalid-personal-{{ $randomString() }}"
            phone: "{{ swedishPhone }}"
            personalNumber: "123456-1234" # Invalid format
            consent: true
          expect:
            - statusCode: 422
            - contentType: json
            - hasProperty: "error"

      # Test missing consent
      - post:
          url: "/api/verification/submit"
          headers:
            Content-Type: "application/json"
          json:
            sessionId: "no-consent-{{ $randomString() }}"
            phone: "{{ swedishPhone }}"
            personalNumber: "{{ personalNumber }}"
            consent: false
          expect:
            - statusCode: 422
            - contentType: json

  # Verification status polling (testing concurrent reads)
  - name: "Verification Status Polling"
    weight: 8
    flow:
      # Create a verification first
      - post:
          url: "/api/verification/submit"
          headers:
            Content-Type: "application/json"
          json:
            sessionId: "polling-{{ $randomString() }}"
            phone: "{{ swedishPhone }}"
            personalNumber: "{{ personalNumber }}"
            consent: true
          capture:
            - json: "$.data.verificationId"
              as: "verificationId"
          expect:
            - statusCode: 200

      # Poll status multiple times
      - loop:
          - get:
              url: "/api/verification/{{ verificationId }}/status"
              expect:
                - statusCode: 200
                - contentType: json
          - think: 0.5
        count: 10

  # Admin verification queries (testing admin load)
  - name: "Admin Verification Queries"
    weight: 2
    flow:
      # Query recent verifications
      - get:
          url: "/api/admin/verification/recent"
          headers:
            Authorization: "Bearer {{ $processEnvironment.ADMIN_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "data"

      # Query verification statistics
      - get:
          url: "/api/admin/verification/stats?period=1h"
          headers:
            Authorization: "Bearer {{ $processEnvironment.ADMIN_TOKEN }}"
          expect:
            - statusCode: 200
            - contentType: json
            - hasProperty: "data.totalVerifications"

# Custom helper functions
before:
  flow:
    - log: "Starting verification load test"
    - log: "Testing Swedish phone verification system"
    - log: "Peak concurrent users: 50"

after:
  flow:
    - log: "Verification load test completed"
    - log: "Analyzing verification system performance"

# Global configuration
defaults:
  headers:
    Accept: "application/json"
    X-Load-Test: "artillery-verification"
    User-Agent: "VociliaLoadTest/1.0"
  
  # Request timeout and retry logic
  beforeRequest: |
    function(requestParams, context, ee, next) {
      // Add random delay to simulate real user behavior
      const delay = Math.random() * 100;
      setTimeout(() => {
        requestParams.timeout = 5000; // 5 second timeout
        return next();
      }, delay);
    }
  
  afterResponse: |
    function(requestParams, response, context, ee, next) {
      // Log verification-specific errors
      if (response.statusCode >= 400) {
        if (response.statusCode === 422) {
          console.log(`Validation error: ${response.body}`);
        } else if (response.statusCode === 429) {
          console.log(`Rate limited: ${response.headers['retry-after']}`);
        } else {
          console.log(`Verification error ${response.statusCode}: ${response.body}`);
        }
      }
      
      // Track verification success metrics
      if (response.statusCode === 200 && requestParams.url.includes('/verification/submit')) {
        ee.emit('counter', 'verification.success', 1);
      }
      
      return next();
    }